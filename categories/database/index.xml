<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on 正小歪 BLOG</title><link>http://hexiangyu.me/categories/database/</link><description>Recent content in Database on 正小歪 BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Jul 2022 22:27:56 +0000</lastBuildDate><atom:link href="http://hexiangyu.me/categories/database/index.xml" rel="self" type="application/rss+xml"/><item><title>MVCC Concepts and HBase Implementation</title><link>http://hexiangyu.me/posts/mvcc-concepts-and-hbase-impl/</link><pubDate>Sun, 10 Jul 2022 22:27:56 +0000</pubDate><guid>http://hexiangyu.me/posts/mvcc-concepts-and-hbase-impl/</guid><description>Multi-Version Concurrency Control 包含两个部分：
Multi-Version：存储多个版本数据，使得读写可以不冲突 Concurrency Control：并发控制，使执行过程可串行化 数据对象在物理上存储多个版本，但是在逻辑上表示为一个对象。当写入时候创建一个新版本的对象，当读取时候读取一个存在的最新对象。
T1 T2 Version Value Begin End BEGIBN A0 123 0 - R(A) BEGIBN W(A) A0 123 0 2 A1 456 2 - R(A) COMMIT COMMIT 初始版本为 A0，值为 123，可见范围是 0 ～ ∞ T1 的 R(A) 因为 0 &amp;lt; 1 &amp;lt; ∞，读取的值为 123 T2 的 W(A) 写入新版 A1，可见范围是 2 ～ ∞，A0 可见范围变为 0 ～ 2 T1 的第二次 R(A) 因为 0 &amp;lt; 1 &amp;lt; 2(A0 版本的 End 是 2)，读取的值为 123 T1 T2 Version Value Begin End BEGIBN A0 123 0 - R(A) W(A) BEGIBN A0 123 0 1 R(A) A1 456 1 - W(A) R(A) A0 123 0 1 COMMIT A1 456 1 2 COMMIT A2 789 2 - T1-R(A) 读取 A0 版本数据 T1-W(A) 写入 A1 版本，Begin 是 1，修改 A0 版本的 End 为 2 T2-R(A) 读取 A0 版本，因为 A1 版本还没提交（读已提交） T2-W(A) 发生 WW 冲突，需要阻塞到 T1 事务完成 T1-R(A) 读取 A1 数据，同一事务写入的版本 T1-Commit 事务 T1 完成事务 T2-W(A) 创建新版本 A2 Begin 为 2，同时修改 A1 的 End 为 2 并发控制（Concurrency Control Protocol） 参考其他并发控制的方式，MVCC 自身不能并发控制</description></item></channel></rss>